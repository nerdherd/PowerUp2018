/* ============================================
SF2 source code is placed under the MIT license
Copyright (c) 2017 Kauai Labs

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in
all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN
THE SOFTWARE.
===============================================
*/

package com.team687.lib.kauailabs.sf2.pose.drivetrain;

import java.util.List;

import com.team687.lib.kauailabs.sf2.orientation.Quaternion;
import com.team687.lib.kauailabs.sf2.pose.Pose;
import com.team687.lib.kauailabs.sf2.quantity.Scalar;
import com.team687.lib.kauailabs.sf2.time.Timestamp;
import com.team687.lib.kauailabs.sf2.time.TimestampedValue;

public interface IDriveTrainKinematics {

	/**
	 * The getDriveTrainParameters returns a {@link DriveTrainParameters} object
	 * which describes the characteristics of the drive train which impact the
	 * kinematic equations.
	 * 
	 * @return a {@link DriveTrainParameters} object.
	 */

	public DriveTrainParameters getDriveTrainParameters();

	/**
	 * The step() method is invoked repeatedly to calculate the estimated change in
	 * drivetrain pose since the last invocation.
	 * 
	 * @param system_timestamp
	 *            The system timestamp representing the timestamp on the system
	 *            executing this software. As much as possible, this timestamp
	 *            represents the time that the data provided in the following
	 *            parameters was acquired, and can be used to align data in time
	 *            when provided by sensors without an internal timestamp mechanism.
	 * @param pose_last
	 *            The last estimated pose generated by this step() method. If this
	 *            is the first time this step() method has been invoked, the pose
	 *            object will have been initialized to a "starting point"
	 *            quaternion, translational offsets and valid "starting timestamp".
	 * @param quat_curr
	 *            The current estimated quaternion representing the drivetrain
	 *            orientation, as well as a timestamp representing the time the
	 *            quaternion was generated.
	 * @param drive_wheel_distance_delta_inches
	 *            An array of measured drive wheel distance changes which occurred
	 *            since the last time this step() method was invoked. These values
	 *            are assumed to be measured coincident with the timestamp member of
	 *            the quat_curr input parameter.
	 * 
	 *            The size of this array must be equal to the number of drive wheels
	 *            previously provided in the DriveTrainParameter object used to
	 *            initialize the object which implements the DriveTrainKinematics
	 *            interface.
	 * 
	 *            The array order of Drive Wheel velocities begins at the left front
	 *            corner of the robot (looking down on the robot) and proceeds in
	 *            increasing order clockwise around the robot.
	 * @param steer_wheel_angle_curr
	 *            An array of current steering wheel angles. These angles are
	 *            assumed to be measured coincident with the timestamp member of the
	 *            quat_curr input parameter.
	 * 
	 *            The size of this array must be equal to the number of steering
	 *            wheels previously provided in the DriveTrainParameter object used
	 *            to initialize the object which implements the DriveTrainKinematics
	 *            interface.
	 * 
	 *            NOTE: set steer_wheel_angle_curr to null if this drivetrain does
	 *            not provide separate steering wheels.
	 * 
	 *            The array order of Steer Wheel angles begins at the left front
	 *            corner of the robot (looking down on the robot) and proceeds in
	 *            increasing order clockwise around the robot.
	 * @param pose_curr_out
	 *            The estimated current drivetrain pose based upon the parameters to
	 *            this method.
	 * @return true if the pose_curr_out input parameter was updated successfully,
	 *         false if an error occurred (e.g., one or more of the input parameters
	 *         were invalid).
	 */
	public boolean step(Timestamp system_timestamp, TimestampedValue<Pose> pose_last,
			TimestampedValue<Quaternion> quat_curr, List<TimestampedValue<Scalar>> drive_wheel_distance_delta_curr,
			List<TimestampedValue<Scalar>> steer_wheel_angle_degrees_curr,
			List<TimestampedValue<Scalar>> drive_motor_current_amps_curr, TimestampedValue<Pose> pose_curr_out);

}
